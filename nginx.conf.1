user       		www www;  			## Default: nobody
							## 		Nginx 用户及组：	用户 组。
							##		window下不指定
worker_processes  	5;  				## Default: 1	工作进程：		数目。		根据硬件调整，通常等于	CPU数量
							## 						  			或者	2倍于CPU
error_log  		logs/error.log;			## 		错误日志：		存放路径。
pid        		logs/nginx.pid;			## 		pid（进程标识符）：	存放路径。
worker_rlimit_nofile 	8192;				##		指定进程可以打开的最大文件描述符：数目。
							##这个指令是指当一个nginx进程打开的最多文件描述符数目，
							##理论值应该是最多打开文件数（ulimit -n）与nginx进程数相除，
							##但是nginx分配请求并不是那么均匀，所以最好与ulimit -n 的值保持一致。
							##现在在Linux 2.6内核下开启文件打开数为65535，worker_rlimit_nofile就相应应该填写65535。
							##这是因为nginx调度时分配请求到进程并不是那么的均衡，
							##所以假如填写10240，总并发量达到3-4万时就有进程可能超过10240了，这时会返回502错误
events {
  	worker_connections  4096;  			## Default: 1024
}
http {
  	include    	conf/mime.types;
  	include    	/etc/nginx/proxy.conf;
  	include    	/etc/nginx/fastcgi.conf;
  	index    	index.html index.htm index.php;
  	default_type 	application/octet-stream;
  	log_format   	main 	'$remote_addr - $remote_user [$time_local]  $status '
    				'"$request" $body_bytes_sent "$http_referer" '
    				'"$http_user_agent" "$http_x_forwarded_for"';
  	access_log   	logs/access.log  main;
  	sendfile     	on;
  	tcp_nopush   	on;
  	server_names_hash_bucket_size 	128; 		# this seems to be required for some vhosts
  	server { 						# php/fastcgi
    		listen       80;
    		server_name  domain1.com www.domain1.com;
    		access_log   logs/domain1.access.log  	main;
    		root         html;
    		location ~ \.php$ {
      			fastcgi_pass   127.0.0.1:1025;
    		}
  	}
  	server { 						# simple reverse-proxy
    		listen       	80;
    		server_name  	domain2.com www.domain2.com;
    		access_log   	logs/domain2.access.log  main;
    	# serve static files
    	location ~ ^/(images|javascript|js|css|flash|media|static)/  {
      		root    	/var/www/virtual/big.server.com/htdocs;
      		expires 	30d;
    	}
    # pass requests for dynamic content to rails/turbogears/zope, et al
    	location / {
      		proxy_pass      http://127.0.0.1:8080;
    	}
  }
  upstream big_server_com {
    	server 127.0.0.3:8000 weight=5;
    	server 127.0.0.3:8001 weight=5;
    	server 192.168.0.1:8000;
    	server 192.168.0.1:8001;
  }
  server { 			# simple load balancing
    	listen          80;
    	server_name     big.server.com;
    	access_log      logs/big.server.access.log main;
    	location / {
      		proxy_pass      http://big_server_com;
    	}
  }
}
